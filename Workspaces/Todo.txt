-Get everything compiling with gcc for another platform
-Move compilation files out of the source tree
-Wrap system math functions and call those
-Clean up system headers
--------------
-Types
--Create color, angle, percentage, euler types
--Create vector and quaternion types
--Create guid
--Create half float
--Hashed file name
--Localized string token
--proper 128 bit types
--can I get the compiler to fit Hash64 into a single register?
--Need better string types
---Too many stack strings with hardcoded values
--------------
-flesh out reflection more
--Need to support enums tied to a class
---Add test for class with multiple enum members
---Include support for private enums
---Need to handle different sizes enums
***Need to use actual enum type instead of just enum
***Need designer friendly names for all enums
--add code to finalize entire reflection library
---Finalize when reflection library is initialized
---Verify that every member of type "class" has a registered ReflClassDesc
---Verify that every parent class has a registered ReflClassDesc
---Verify that members are the correct size
---Verify that member offsets are monotonic
---make sure that there are no duplicate class names, include aliases
---Verify that a class doesn't reflect members of a base class
---If using 32 bit hashes, verify that there are no collisions
---can I trap missing parents?
--Designer friendly names???
--Add support for classes that can't derive off of ReflClass
--Have serialization use a template function to eliminate the cast?
--eliminate virtuals in ReflClass base
---Need better method for calculating reflOffset
---Add support for casting from ReflClass of 2nd parent
---Add support for casting from multiple ReflClass parents(ambiguous if there's multiple inheritance)
----Don't pass inst through cast functions, use void * instead?
----Re-enable tests
--How do I want to allocate reflected members? It would be preferred to allocate in contiguous arrays
---However how do we handle ref counting and deletion?
--Prep everything for precompiled hashes
--Can I use typeid to get member name strings at compile time only? And do I need this?
--How do I return loaded data to outside world
---Think about use cases for how loaded data will be used
***All handled through the resource manager
***Need the ability to safely cast to the appropriate type
--instead of doing all initialization in global contructors, just register functions and then call them all at the beginning of main
--handle all types
---remove basic string type, should either be a hashed file name, or localized string
---guid
---bitfield
---half float
---128 bit types
---euler angles, vectors and quaternions
---hashed files name, with file type filter
---Localized string
***Add support for enum type
***Add support for class types
****Need to handle offset correctly for non-pod data members
--need to handle returns from stream i/o
--need to handle multiple classes serialized into a single text file
--binary serialization
---Always embed a version #
---Need to write out type hash and size
---Need a base class to derive streams off of so I only have one function for text and binary deserialization
--implement template version and test performance when reading binary data?
--Test
---Need to test all types
----Test currently unimplemented types
---Test const casting
****Currently implemented types
****Test that int8 deserialization works if the member is packed
---Need to test missing/extra types
----Need to log these
---Missing aliases(this is really just a extra type)
----Need to log these
***Complex inheritance
***Manual versioning
***Multiple aliases
***Simple class hierarchy
***multiple inheritance
***Simple aliasing
***Aliasing with conversion
***Conversion
***Namespaces
--Need to remove strings in "gold" builds
--Improve upon embedded class reading(would be nice to have one function that reads single classes, subclasses and embedded classes out of a file)
--Need to support deserializing reflected classes that are embedded in other xml
---Really just need to return multiple ReflClasses from Deserialize function.
--Add support for constraints on members
--Add support for documentation on members
--Endian swapping
--Think about whether things like maps, textures, geometry buffers, etc use reflection or more manual system
---I think it really depends on how good I can make the versioning
-*Need to handle varargs and scanf(not perfect, but it works for the moment)
**Add code for finalizing reflected data after it's been deserialized
**Need to write data member value
**64 & 128 bit types
**need boolean type
**Need to clarify type size
**need to read data back in
**Rename read/write on ReflClassDesc to serialize/deserialize
**Need to verify type when reading in structured text values
**Sort members based on order
**partial specialization on string functions for types that need special handling
**need to handle class inheiritance
***embed base class members in a sub-node??
***Support virtual inheritance? NO!
***need to test complicated inheiritance
***need to test inheiritance in class data members
***multiple inheiritance
***Need to store offset of base classes to support multiple inheiritance
***Need to use offset
***Basic inheiritance
**Need to test that namespaces work
***Add support for namespaces
**Replace all Hash64's with a type
**Change EReflType to be EReflTypeIndex
***Change enum to typedef'd unsigned
***Move enum internal to reflection
**Rename ReflToken to something that makes more sense
**Predefined hashes for all of the types, no causes assymmetry for non-pod types
***Would prefer to use precompiled hashes but need a preprocessor pass
**Override int8 string functions and print them as ints
**Unit tests all around
**Switch to 32 bit tokens
**Auto determine types
**versioning
***Classes
****Versioned loading with complicated conversion using multiple members
****For manual versioning, each member can be tied to a specific version number range, actually this is too limiting
****The manual load function is called, it binds stack member to the old members if the type is in the version range
****Then it calls into the regular load, the load sets the values on the stack and then returns allowing for finalization
****Rename
***Members
****Type conversion
****Renamed enums
****Rename
**Add safe cast functions
***Need to handle casting to parent classes
***Why not use RTTI???, inconsistent between platforms, not serializable, requires virtuals, very limited for what I need, effectively redundant
***Test RTTI
**eliminate virtuals in ReflClass base
***Test with virtuals in second base class
***Unify OffsetToParent functions
***Test downcasting from actual type to lesser types
***Unit tests for casting from multiple base classes to derived class
****Need to test where m_reflOffset != 0
****Test casting to self
****Test with virtuals
****Make sure InitInst works correctly still
*****Can be simplified
***Can I set up casting to work with classes that don't derive from ReflClass?
****I can cast to them but not from them
***Unit test for casting to base when base has virtuals
***test that classes with virtuals work correctly, ReflClass has to be at the root of the inheritance?
****Need better initialization support
****alternatively if each instance just had a 32 bit hash in the base class I could do everything as a c interface! :)
****Need to handle casting to parents
***Useful for classes I don't control, however can't access private members. Test this
***Yes with template functions, though can't do a full implementation
***Fix casting to use m_reflOffset
**Use table instead of linked list for members? Not needed and doesn't work
**Use specialized template functions to get class type for members
***Can I do something similar for dealing with namespaces? No.
**Clean up header so class functions are organized better by functionality
----------
-Create tools platform
--Layer tools functionality on top of platform
--Add string class under tools platform?
----------
-Improve hash system
--Compile time hashing
--associate string with hash
----------
-Containers
--Bit field
--Array(fixed, dynamic)
--hash
--test against STL
----------
-Ref counted type
-Smart pointers
-Weak pointers
----------
-Flesh out memory manager
--memory leak checker
----------
-logging
--each module should prefix itself to the log message. Preferably do this automatically
----------
-exception handler
----------
-very fast curve evaluation lib
----------
-job manager
----------
-tools framework(javascript?)
----------
-Fix up unit tests?
----------
----------
*convert asserts to wide char
*rename types/functions away from UL
*flags to MemFlags for whether allocation can fail or not
*copyright notices
*compiler assert
*TESTME
*Str version of scanf
*nammespace internals
*come up with better xml deserialization method(deal with const cast)
xxIterators with explicit control over going to siblings and children
xxHow to create a pure virtual iterator that doesn't require memory allocation
*switch radian conversion functions to use PI
*Check UL standard to see what I say about spaces between while(

